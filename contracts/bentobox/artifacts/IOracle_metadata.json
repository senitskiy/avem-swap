{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "get",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "peek",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "peekSpot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"get(bytes)": {
					"params": {
						"data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
					},
					"returns": {
						"rate": "The rate of the requested asset / pair / pool.",
						"success": "if no valid (recent) rate is available, return false else true."
					}
				},
				"name(bytes)": {
					"params": {
						"data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
					},
					"returns": {
						"_0": "(string) A human readable name about this oracle."
					}
				},
				"peek(bytes)": {
					"params": {
						"data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
					},
					"returns": {
						"rate": "The rate of the requested asset / pair / pool.",
						"success": "if no valid (recent) rate is available, return false else true."
					}
				},
				"peekSpot(bytes)": {
					"params": {
						"data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
					},
					"returns": {
						"rate": "The rate of the requested asset / pair / pool."
					}
				},
				"symbol(bytes)": {
					"params": {
						"data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
					},
					"returns": {
						"_0": "(string) A human readable symbol name about this oracle."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"get(bytes)": {
					"notice": "Get the latest exchange rate."
				},
				"name(bytes)": {
					"notice": "Returns a human readable name about this oracle."
				},
				"peek(bytes)": {
					"notice": "Check the last exchange rate without any state changes."
				},
				"peekSpot(bytes)": {
					"notice": "Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek()."
				},
				"symbol(bytes)": {
					"notice": "Returns a human readable (short) name about this oracle."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/bentobox/PeggedOracleV1.sol": "IOracle"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/bentobox/PeggedOracleV1.sol": {
			"keccak256": "0x46adf9399279726397250e1664d0f694daba303c7549f9576335e9cf69e47a95",
			"license": "MIT",
			"urls": [
				"bzz-raw://e97e7ca400286987a4ba94c7017cd642515596eb591362c4c4cebf102a9718ef",
				"dweb:/ipfs/QmcveihTr5NXSoSWTPGQbp4CTbKrn6guVgDJVrNsdBB19W"
			]
		}
	},
	"version": 1
}