{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IBentoBoxV1",
						"name": "bentoBox_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accruedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feeFraction",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "rate",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "utilization",
						"type": "uint256"
					}
				],
				"name": "LogAccrue",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fraction",
						"type": "uint256"
					}
				],
				"name": "LogAddAsset",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "LogAddCollateral",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feeAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "part",
						"type": "uint256"
					}
				],
				"name": "LogBorrow",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"name": "LogExchangeRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "newFeeTo",
						"type": "address"
					}
				],
				"name": "LogFeeTo",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fraction",
						"type": "uint256"
					}
				],
				"name": "LogRemoveAsset",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "LogRemoveCollateral",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "part",
						"type": "uint256"
					}
				],
				"name": "LogRepay",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "feeTo",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feesEarnedFraction",
						"type": "uint256"
					}
				],
				"name": "LogWithdrawFees",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "accrue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "accrueInfo",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "interestPerSecond",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "lastAccrued",
						"type": "uint64"
					},
					{
						"internalType": "uint128",
						"name": "feesEarnedFraction",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "skim",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "addAsset",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fraction",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "skim",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "addCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "asset",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bentoBox",
				"outputs": [
					{
						"internalType": "contract IBentoBoxV1",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "borrow",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "part",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collateral",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8[]",
						"name": "actions",
						"type": "uint8[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "datas",
						"type": "bytes[]"
					}
				],
				"name": "cook",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "value1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "value2",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "exchangeRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeTo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "init",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "users",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "maxBorrowParts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "contract ISwapper",
						"name": "swapper",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "open",
						"type": "bool"
					}
				],
				"name": "liquidate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "masterContract",
				"outputs": [
					{
						"internalType": "contract KashiPairMediumRiskV1",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "oracle",
				"outputs": [
					{
						"internalType": "contract IOracle",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "oracleData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "fraction",
						"type": "uint256"
					}
				],
				"name": "removeAsset",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "removeCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "skim",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "part",
						"type": "uint256"
					}
				],
				"name": "repay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newFeeTo",
						"type": "address"
					}
				],
				"name": "setFeeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ISwapper",
						"name": "swapper",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "enable",
						"type": "bool"
					}
				],
				"name": "setSwapper",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ISwapper",
						"name": "",
						"type": "address"
					}
				],
				"name": "swappers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAsset",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "elastic",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "base",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalBorrow",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "elastic",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "base",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalCollateralShare",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "direct",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "renounce",
						"type": "bool"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateExchangeRate",
				"outputs": [
					{
						"internalType": "bool",
						"name": "updated",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userBorrowPart",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userCollateralShare",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Return the DOMAIN_SEPARATOR"
				},
				"addAsset(address,bool,uint256)": {
					"params": {
						"share": "The amount of shares to add.",
						"skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
						"to": "The address of the user to receive the assets."
					},
					"returns": {
						"fraction": "Total fractions added."
					}
				},
				"addCollateral(address,bool,uint256)": {
					"params": {
						"share": "The amount of shares to add for `to`.",
						"skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
						"to": "The receiver of the tokens."
					}
				},
				"approve(address,uint256)": {
					"params": {
						"amount": "The maximum collective amount that `spender` can draw.",
						"spender": "Address of the party that can draw from msg.sender's account."
					},
					"returns": {
						"_0": "(bool) Returns True if approved."
					}
				},
				"borrow(address,uint256)": {
					"returns": {
						"part": "Total part of the debt held by borrowers.",
						"share": "Total amount in shares borrowed."
					}
				},
				"cook(uint8[],uint256[],bytes[])": {
					"params": {
						"actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
						"datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
						"values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
					},
					"returns": {
						"value1": "May contain the first positioned return value of the last executed action (if applicable).",
						"value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
					}
				},
				"init(bytes)": {
					"details": "`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)"
				},
				"liquidate(address[],uint256[],address,address,bool)": {
					"params": {
						"maxBorrowParts": "A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.",
						"open": "True to perform a open liquidation else False.",
						"swapper": "Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.",
						"to": "Address of the receiver in open liquidations if `swapper` is zero.",
						"users": "An array of user addresses."
					}
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"deadline": "This permit must be redeemed before this deadline (UTC timestamp in seconds).",
						"owner_": "Address of the owner.",
						"spender": "The address of the spender that gets approved to draw from `owner_`.",
						"value": "The maximum collective amount that `spender` can draw."
					}
				},
				"removeAsset(address,uint256)": {
					"params": {
						"fraction": "The amount/fraction of assets held to remove.",
						"to": "The user that receives the removed assets."
					},
					"returns": {
						"share": "The amount of shares transferred to `to`."
					}
				},
				"removeCollateral(address,uint256)": {
					"params": {
						"share": "Amount of shares to remove.",
						"to": "The receiver of the shares."
					}
				},
				"repay(address,bool,uint256)": {
					"params": {
						"part": "The amount to repay. See `userBorrowPart`.",
						"skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
						"to": "Address of the user this payment should go."
					},
					"returns": {
						"amount": "The total amount repayed."
					}
				},
				"setFeeTo(address)": {
					"params": {
						"newFeeTo": "The address of the receiver."
					}
				},
				"setSwapper(address,bool)": {
					"params": {
						"enable": "True to enable the swapper. To disable use False.",
						"swapper": "The address of the swapper contract that conforms to `ISwapper`."
					}
				},
				"transfer(address,uint256)": {
					"params": {
						"amount": "of the tokens to move.",
						"to": "The address to move the tokens."
					},
					"returns": {
						"_0": "(bool) Returns True if succeeded."
					}
				},
				"transferFrom(address,address,uint256)": {
					"params": {
						"amount": "The token amount to move.",
						"from": "Address to draw tokens from.",
						"to": "The address to move the tokens."
					},
					"returns": {
						"_0": "(bool) Returns True if succeeded."
					}
				},
				"transferOwnership(address,bool,bool)": {
					"params": {
						"direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
						"newOwner": "Address of the new owner.",
						"renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
					}
				},
				"updateExchangeRate()": {
					"returns": {
						"rate": "The new exchange rate.",
						"updated": "True if `exchangeRate` was updated."
					}
				}
			},
			"title": "KashiPair",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"accrue()": {
					"notice": "Accrues the interest on the borrowed tokens and handles the accumulation of fees."
				},
				"addAsset(address,bool,uint256)": {
					"notice": "Adds assets to the lending pair."
				},
				"addCollateral(address,bool,uint256)": {
					"notice": "Adds `collateral` from msg.sender to the account `to`."
				},
				"allowance(address,address)": {
					"notice": "owner > spender > allowance mapping."
				},
				"approve(address,uint256)": {
					"notice": "Approves `amount` from sender to be spend by `spender`."
				},
				"balanceOf(address)": {
					"notice": "owner > balance mapping."
				},
				"borrow(address,uint256)": {
					"notice": "Sender borrows `amount` and transfers it to `to`."
				},
				"claimOwnership()": {
					"notice": "Needs to be called by `pendingOwner` to claim ownership."
				},
				"constructor": "The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.",
				"cook(uint8[],uint256[],bytes[])": {
					"notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
				},
				"exchangeRate()": {
					"notice": "Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive."
				},
				"init(bytes)": {
					"notice": "Serves as the constructor for clones, as clones can't have a regular constructor"
				},
				"liquidate(address[],uint256[],address,address,bool)": {
					"notice": "Handles the liquidation of users' balances, once the users' amount of collateral is too low."
				},
				"nonces(address)": {
					"notice": "owner > nonce mapping. Used in `permit`."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Approves `value` from `owner_` to be spend by `spender`."
				},
				"removeAsset(address,uint256)": {
					"notice": "Removes an asset from msg.sender and transfers it to `to`."
				},
				"removeCollateral(address,uint256)": {
					"notice": "Removes `share` amount of collateral and transfers it to `to`."
				},
				"repay(address,bool,uint256)": {
					"notice": "Repays a loan."
				},
				"setFeeTo(address)": {
					"notice": "Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function."
				},
				"setSwapper(address,bool)": {
					"notice": "Used to register and enable or disable swapper contracts used in closed liquidations. MasterContract Only Admin function."
				},
				"transfer(address,uint256)": {
					"notice": "Transfers `amount` tokens from `msg.sender` to `to`."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`."
				},
				"transferOwnership(address,bool,bool)": {
					"notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
				},
				"updateExchangeRate()": {
					"notice": "Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive."
				},
				"withdrawFees()": {
					"notice": "Withdraws the fees accumulated."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/bentobox/KashiPairMediumRiskV1.sol": "KashiPairMediumRiskV1"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/bentobox/KashiPairMediumRiskV1.sol": {
			"keccak256": "0xf37ff7488158ae183be078253916cf0632314c2acfbfb9e9a35434b2bc05631e",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://c250cb8f5a1d3b29619fdf6d2cd12a9e35eea88cee58905ed6b2794f0881b40b",
				"dweb:/ipfs/QmYqX9fhBUDg8cQKCL5Lmt26Ek4z1NUmgHn2emdT3Jetzz"
			]
		}
	},
	"version": 1
}