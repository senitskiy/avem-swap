{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IMasterChef",
						"name": "_MASTER_CHEF",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_sushi",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_MASTER_PID",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "EmergencyWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Harvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "LogInit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "lpToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IRewarder",
						"name": "rewarder",
						"type": "address"
					}
				],
				"name": "LogPoolAddition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "contract IRewarder",
						"name": "rewarder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "overwrite",
						"type": "bool"
					}
				],
				"name": "LogSetPool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "lastRewardBlock",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lpSupply",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accSushiPerShare",
						"type": "uint256"
					}
				],
				"name": "LogUpdatePool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MASTER_CHEF",
				"outputs": [
					{
						"internalType": "contract IMasterChef",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MASTER_PID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SUSHI",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC20",
						"name": "_lpToken",
						"type": "address"
					},
					{
						"internalType": "contract IRewarder",
						"name": "_rewarder",
						"type": "address"
					}
				],
				"name": "add",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "calls",
						"type": "bytes[]"
					},
					{
						"internalType": "bool",
						"name": "revertOnFail",
						"type": "bool"
					}
				],
				"name": "batch",
				"outputs": [
					{
						"internalType": "bool[]",
						"name": "successes",
						"type": "bool[]"
					},
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "emergencyWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "harvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "harvestFromMasterChef",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "dummyToken",
						"type": "address"
					}
				],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "lpToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "pids",
						"type": "uint256[]"
					}
				],
				"name": "massUpdatePools",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "migrate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "migrator",
				"outputs": [
					{
						"internalType": "contract IMigratorChef",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "pendingSushi",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "pending",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permitToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolInfo",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "accSushiPerShare",
						"type": "uint128"
					},
					{
						"internalType": "uint64",
						"name": "lastRewardBlock",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "allocPoint",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "pools",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rewarder",
				"outputs": [
					{
						"internalType": "contract IRewarder",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "contract IRewarder",
						"name": "_rewarder",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "overwrite",
						"type": "bool"
					}
				],
				"name": "set",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IMigratorChef",
						"name": "_migrator",
						"type": "address"
					}
				],
				"name": "setMigrator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sushiPerBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAllocPoint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "direct",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "renounce",
						"type": "bool"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					}
				],
				"name": "updatePool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "accSushiPerShare",
								"type": "uint128"
							},
							{
								"internalType": "uint64",
								"name": "lastRewardBlock",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "allocPoint",
								"type": "uint64"
							}
						],
						"internalType": "struct MasterChefV2.PoolInfo",
						"name": "pool",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rewardDebt",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdrawAndHarvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"add(uint256,address,address)": {
					"params": {
						"_lpToken": "Address of the LP ERC-20 token.",
						"_rewarder": "Address of the rewarder delegate.",
						"allocPoint": "AP of the new pool."
					}
				},
				"constructor": {
					"params": {
						"_MASTER_CHEF": "The SushiSwap MCV1 contract address.",
						"_MASTER_PID": "The pool ID of the dummy token on the base MCV1 contract.",
						"_sushi": "The SUSHI token contract address."
					}
				},
				"deposit(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to deposit.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "The receiver of `amount` deposit benefit."
					}
				},
				"emergencyWithdraw(uint256,address)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens."
					}
				},
				"harvest(uint256,address)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of SUSHI rewards."
					}
				},
				"init(address)": {
					"params": {
						"dummyToken": "The address of the ERC-20 token to deposit into MCV1."
					}
				},
				"massUpdatePools(uint256[])": {
					"params": {
						"pids": "Pool IDs of all to be updated. Make sure to update all active pools."
					}
				},
				"migrate(uint256)": {
					"params": {
						"_pid": "The index of the pool. See `poolInfo`."
					}
				},
				"pendingSushi(uint256,address)": {
					"params": {
						"_pid": "The index of the pool. See `poolInfo`.",
						"_user": "Address of user."
					},
					"returns": {
						"pending": "SUSHI reward for a given user."
					}
				},
				"set(uint256,uint256,address,bool)": {
					"params": {
						"_allocPoint": "New AP of the pool.",
						"_pid": "The index of the pool. See `poolInfo`.",
						"_rewarder": "Address of the rewarder delegate.",
						"overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored."
					}
				},
				"setMigrator(address)": {
					"params": {
						"_migrator": "The contract address to set."
					}
				},
				"updatePool(uint256)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`."
					},
					"returns": {
						"pool": "Returns the pool that was updated."
					}
				},
				"withdraw(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to withdraw.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens."
					}
				},
				"withdrawAndHarvest(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to withdraw.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens and SUSHI rewards."
					}
				}
			},
			"stateVariables": {
				"totalAllocPoint": {
					"details": "Total allocation points. Must be the sum of all allocation points in all pools."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"MASTER_CHEF()": {
					"notice": "Address of MCV1 contract."
				},
				"MASTER_PID()": {
					"notice": "The index of MCV2 master pool in MCV1."
				},
				"SUSHI()": {
					"notice": "Address of SUSHI contract."
				},
				"add(uint256,address,address)": {
					"notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
				},
				"deposit(uint256,uint256,address)": {
					"notice": "Deposit LP tokens to MCV2 for SUSHI allocation."
				},
				"emergencyWithdraw(uint256,address)": {
					"notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
				},
				"harvest(uint256,address)": {
					"notice": "Harvest proceeds for transaction sender to `to`."
				},
				"harvestFromMasterChef()": {
					"notice": "Harvests SUSHI from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to this MCV2 contract."
				},
				"init(address)": {
					"notice": "Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting rights for SUSHI. Any balance of transaction sender in `dummyToken` is transferred. The allocation point for the pool on MCV1 is the total allocation point for all pools that receive double incentives."
				},
				"lpToken(uint256)": {
					"notice": "Address of the LP token for each MCV2 pool."
				},
				"massUpdatePools(uint256[])": {
					"notice": "Update reward variables for all pools. Be careful of gas spending!"
				},
				"migrate(uint256)": {
					"notice": "Migrate LP token to another LP contract through the `migrator` contract."
				},
				"pendingSushi(uint256,address)": {
					"notice": "View function to see pending SUSHI on frontend."
				},
				"poolInfo(uint256)": {
					"notice": "Info of each MCV2 pool."
				},
				"poolLength()": {
					"notice": "Returns the number of MCV2 pools."
				},
				"rewarder(uint256)": {
					"notice": "Address of each `IRewarder` contract in MCV2."
				},
				"set(uint256,uint256,address,bool)": {
					"notice": "Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner."
				},
				"setMigrator(address)": {
					"notice": "Set the `migrator` contract. Can only be called by the owner."
				},
				"sushiPerBlock()": {
					"notice": "Calculates and returns the `amount` of SUSHI per block."
				},
				"updatePool(uint256)": {
					"notice": "Update reward variables of the given pool."
				},
				"userInfo(uint256,address)": {
					"notice": "Info of each user that stakes LP tokens."
				},
				"withdraw(uint256,uint256,address)": {
					"notice": "Withdraw LP tokens from MCV2."
				},
				"withdrawAndHarvest(uint256,uint256,address)": {
					"notice": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`."
				}
			},
			"notice": "The (older) MasterChef contract gives out a constant number of SUSHI tokens per block. It is the only address with minting rights for SUSHI. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MasterChefV2.sol": "MasterChefV2"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol": {
			"keccak256": "0xe0b0316b015447ee28c6b7d96c4347b410a66e5d26e922ef3bcccc22f3b4d590",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://bdc37ac77ad2a54674d4dbd9248bed4e948792115521415e2699d4d88fdd33c3",
				"dweb:/ipfs/QmPHv7YpwqJKCja8txMMYGgr4DgZcjPeJiB5FjtmERvq1N"
			]
		},
		"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol": {
			"keccak256": "0xfafb586b248c1c697227f5745397562cfe5be2f04e19fb80fc79fc94e3afaba1",
			"license": "MIT",
			"urls": [
				"bzz-raw://a5dec394919b31e1a455a39062aeb44276de7b548a9b5ead748ace6685ea6de0",
				"dweb:/ipfs/QmaVPaiTziZE9k5JKYMDHiC3XuFL97mMtsHrMBJWCYU3c7"
			]
		},
		"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol": {
			"keccak256": "0x8004f86e4536cca55b8eeb2621fe18e1ee57d779396ddef50bce5bf70fb59867",
			"license": "MIT",
			"urls": [
				"bzz-raw://149f2f758deda74a5e855ff934fe93daadadb583d09440832e908365f9235d29",
				"dweb:/ipfs/QmUsZkg1zhehPbPBbf15Pv5BEnP4eaKMpJ1cBN9LGaZurC"
			]
		},
		"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol": {
			"keccak256": "0x69f1ccf716991e5d6d64dc0e3bc3828fd1990bc18400d680b1aa1960675daaaa",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b529d3c0ce62bf9fe78f919076e8bf6a1f06803a8977bcabfde79f1979129a6c",
				"dweb:/ipfs/QmbqHLBPKtSb9wDCrzxeRSRmZJpNdstKjCYXo5EcYEFL4e"
			]
		},
		"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol": {
			"keccak256": "0x2d0e99483c5618251d4b52e8551918253bf044c63e0d09a2f1f652671f9ff762",
			"license": "MIT",
			"urls": [
				"bzz-raw://455e6b5fc9912a2660e6c7a5ed664f89400cc80b3328e50134196d6e21773461",
				"dweb:/ipfs/QmUofeuCbKDdK9DMVo5A7AHys6MwqYmNQM6HaryLbr9g2g"
			]
		},
		"contracts/MasterChefV2.sol": {
			"keccak256": "0x2048c5e7b174e2f8f931045df32b1d56f09f488cfac3c87632b9730e0aba9bc3",
			"license": "MIT",
			"urls": [
				"bzz-raw://771ab92101f2ee834e371cd51a0a5ea0187c8583d56753bfa4168fda50db70f6",
				"dweb:/ipfs/QmVwWpeEsbeEDhNjZwa3vDtAnZe4Xt1TDWhcZxyqxX7inF"
			]
		},
		"contracts/interfaces/IMasterChef.sol": {
			"keccak256": "0xbbb2138d7b8be86b5d0bed347ab7f6d2d3e66043393abc882ad37a75fdd860d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://653c61d9936cae961b882eba365c18e7518fe55254f7426995ba672e16e52174",
				"dweb:/ipfs/QmbmGkvb4ovjBdbCcEgD8ivQxjxdu3aMn9kVyjCMdivMkK"
			]
		},
		"contracts/interfaces/IRewarder.sol": {
			"keccak256": "0x1b5632385c9d0a0abc6d168cfacff67e40675eca46f65525fb3336e01cc4e3ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://44a5d79bce3f52e509f1906ad07ddb8691cfc36d10ab482e41f4290c33ccc7a8",
				"dweb:/ipfs/QmdPGowvhqJrs2AwBAghD4DxPYydGMDbBZbrSHyB6UYb7U"
			]
		},
		"contracts/libraries/SignedSafeMath.sol": {
			"keccak256": "0x4991beb21b224dfcdc3d251e0a60fdc304d4f6b699b2c35d08f3974e5b84c86a",
			"license": "MIT",
			"urls": [
				"bzz-raw://369067b378136df2214fcbabc8fcab8708f6cb3894e4f2e965d83961bf6e4fa1",
				"dweb:/ipfs/QmbvtAiqmY8aLaw8WuZnKzyB6mAuwrZs8QPpcvDN6S5Vig"
			]
		}
	},
	"version": 1
}