{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "cloneAddress",
						"type": "address"
					}
				],
				"name": "LogDeploy",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "protocol",
						"type": "address"
					}
				],
				"name": "LogRegisterProtocol",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "LogSetMasterContractApproval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "LogWhiteListMasterContract",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "useCreate2",
						"type": "bool"
					}
				],
				"name": "deploy",
				"outputs": [
					{
						"internalType": "address",
						"name": "cloneAddress",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "masterContractApproved",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "masterContractOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registerProtocol",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "setMasterContractApproval",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "direct",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "renounce",
						"type": "bool"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "whitelistMasterContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelistedMasterContracts",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"deploy(address,bytes,bool)": {
					"params": {
						"data": "Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.",
						"masterContract": "The address of the contract to clone.",
						"useCreate2": "Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."
					},
					"returns": {
						"cloneAddress": "Address of the created clone contract."
					}
				},
				"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)": {
					"params": {
						"approved": "If True approves access. If False revokes access.",
						"masterContract": "The address who gains or loses access.",
						"r": "Part of the signature. (See EIP-191)",
						"s": "Part of the signature. (See EIP-191)",
						"user": "The address of the user that approves or revokes access.",
						"v": "Part of the signature. (See EIP-191)"
					}
				},
				"transferOwnership(address,bool,bool)": {
					"params": {
						"direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
						"newOwner": "Address of the new owner.",
						"renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimOwnership()": {
					"notice": "Needs to be called by `pendingOwner` to claim ownership."
				},
				"deploy(address,bytes,bool)": {
					"notice": "Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."
				},
				"masterContractApproved(address,address)": {
					"notice": "masterContract to user to approval state"
				},
				"masterContractOf(address)": {
					"notice": "Mapping from clone contracts to their masterContract."
				},
				"nonces(address)": {
					"notice": "user nonces for masterContract approvals"
				},
				"registerProtocol()": {
					"notice": "Other contracts need to register with this master contract so that users can approve them for the BentoBox."
				},
				"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)": {
					"notice": "Approves or revokes a `masterContract` access to `user` funds."
				},
				"transferOwnership(address,bool,bool)": {
					"notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
				},
				"whitelistMasterContract(address,bool)": {
					"notice": "Enables or disables a contract for approval without signed message."
				},
				"whitelistedMasterContracts(address)": {
					"notice": "masterContract to whitelisted state for approval without signed message"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts_New_v.0.6.12/bentobox/BentoBox.sol": "MasterContractManager"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts_New_v.0.6.12/bentobox/BentoBox.sol": {
			"keccak256": "0xf5251397b9aaa5c66ddc18b0cb96350ffac09f5776a1255fedc0072641f916fe",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://a50ae7838a0c690efa617f439504a524b52db118895aa95e139fb07fb9aa009d",
				"dweb:/ipfs/QmWdWpQ2jmhfE3LUpukU93AD38UNm48tV8WKpGotv34rRa"
			]
		}
	},
	"version": 1
}