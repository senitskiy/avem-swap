{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wethToken_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "cloneAddress",
						"type": "address"
					}
				],
				"name": "LogDeploy",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "LogDeposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feeAmount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "LogFlashLoan",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "protocol",
						"type": "address"
					}
				],
				"name": "LogRegisterProtocol",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "LogSetMasterContractApproval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LogStrategyDivest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LogStrategyInvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LogStrategyLoss",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LogStrategyProfit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IStrategy",
						"name": "strategy",
						"type": "address"
					}
				],
				"name": "LogStrategyQueued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IStrategy",
						"name": "strategy",
						"type": "address"
					}
				],
				"name": "LogStrategySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "targetPercentage",
						"type": "uint256"
					}
				],
				"name": "LogStrategyTargetPercentage",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "LogTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "LogWhiteListMasterContract",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "LogWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "calls",
						"type": "bytes[]"
					},
					{
						"internalType": "bool",
						"name": "revertOnFail",
						"type": "bool"
					}
				],
				"name": "batch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IBatchFlashBorrower",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "receivers",
						"type": "address[]"
					},
					{
						"internalType": "contract IERC20[]",
						"name": "tokens",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "batchFlashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "useCreate2",
						"type": "bool"
					}
				],
				"name": "deploy",
				"outputs": [
					{
						"internalType": "address",
						"name": "cloneAddress",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "shareOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IFlashBorrower",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "flashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "balance",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "maxChangeAmount",
						"type": "uint256"
					}
				],
				"name": "harvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "masterContractApproved",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "masterContractOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"name": "pendingStrategy",
				"outputs": [
					{
						"internalType": "contract IStrategy",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permitToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registerProtocol",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "setMasterContractApproval",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "contract IStrategy",
						"name": "newStrategy",
						"type": "address"
					}
				],
				"name": "setStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "targetPercentage_",
						"type": "uint64"
					}
				],
				"name": "setStrategyTargetPercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"name": "strategy",
				"outputs": [
					{
						"internalType": "contract IStrategy",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"name": "strategyData",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "strategyStartDate",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "targetPercentage",
						"type": "uint64"
					},
					{
						"internalType": "uint128",
						"name": "balance",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "roundUp",
						"type": "bool"
					}
				],
				"name": "toAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "roundUp",
						"type": "bool"
					}
				],
				"name": "toShare",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"name": "totals",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "elastic",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "base",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "tos",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "shares",
						"type": "uint256[]"
					}
				],
				"name": "transferMultiple",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "direct",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "renounce",
						"type": "bool"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "masterContract",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "whitelistMasterContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelistedMasterContracts",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "share",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "shareOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "BoringCrypto, Keno",
			"kind": "dev",
			"methods": {
				"batch(bytes[],bool)": {
					"params": {
						"calls": "An array of inputs for each call.",
						"revertOnFail": "If True then reverts after a failed call and stops doing further calls."
					}
				},
				"batchFlashLoan(address,address[],address[],uint256[],bytes)": {
					"params": {
						"amounts": "of the tokens for each receiver.",
						"borrower": "The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.",
						"data": "The calldata to pass to the `borrower` contract.",
						"receivers": "An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.",
						"tokens": "The addresses of the tokens."
					}
				},
				"deploy(address,bytes,bool)": {
					"params": {
						"data": "Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.",
						"masterContract": "The address of the contract to clone.",
						"useCreate2": "Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."
					},
					"returns": {
						"cloneAddress": "Address of the created clone contract."
					}
				},
				"deposit(address,address,address,uint256,uint256)": {
					"params": {
						"amount": "Token amount in native representation to deposit.",
						"from": "which account to pull the tokens.",
						"share": "Token amount represented in shares to deposit. Takes precedence over `amount`.",
						"to": "which account to push the tokens.",
						"token_": "The ERC-20 token to deposit."
					},
					"returns": {
						"amountOut": "The amount deposited.",
						"shareOut": "The deposited amount repesented in shares."
					}
				},
				"flashLoan(address,address,address,uint256,bytes)": {
					"params": {
						"amount": "of the tokens to receive.",
						"borrower": "The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.",
						"data": "The calldata to pass to the `borrower` contract.",
						"receiver": "Address of the token receiver.",
						"token": "The address of the token to receive."
					}
				},
				"harvest(address,bool,uint256)": {
					"params": {
						"balance": "True if housekeeping should be done.",
						"maxChangeAmount": "The maximum amount for either pulling or pushing from/to the `IStrategy` contract.",
						"token": "The address of the token for which a strategy is deployed."
					}
				},
				"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)": {
					"params": {
						"approved": "If True approves access. If False revokes access.",
						"masterContract": "The address who gains or loses access.",
						"r": "Part of the signature. (See EIP-191)",
						"s": "Part of the signature. (See EIP-191)",
						"user": "The address of the user that approves or revokes access.",
						"v": "Part of the signature. (See EIP-191)"
					}
				},
				"setStrategy(address,address)": {
					"details": "Only the owner of this contract is allowed to change this.",
					"params": {
						"newStrategy": "The address of the contract that conforms to `IStrategy`.",
						"token": "The address of the token that maps to a strategy to change."
					}
				},
				"setStrategyTargetPercentage(address,uint64)": {
					"details": "Only the owner of this contract is allowed to change this.",
					"params": {
						"targetPercentage_": "The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.",
						"token": "The address of the token that maps to a strategy to change."
					}
				},
				"toAmount(address,uint256,bool)": {
					"details": "Helper function represent shares back into the `token` amount.",
					"params": {
						"roundUp": "If the result should be rounded up.",
						"share": "The amount of shares.",
						"token": "The ERC-20 token."
					},
					"returns": {
						"amount": "The share amount back into native representation."
					}
				},
				"toShare(address,uint256,bool)": {
					"details": "Helper function to represent an `amount` of `token` in shares.",
					"params": {
						"amount": "The `token` amount.",
						"roundUp": "If the result `share` should be rounded up.",
						"token": "The ERC-20 token."
					},
					"returns": {
						"share": "The token amount represented in shares."
					}
				},
				"transfer(address,address,address,uint256)": {
					"params": {
						"from": "which user to pull the tokens.",
						"share": "The amount of `token` in shares.",
						"to": "which user to push the tokens.",
						"token": "The ERC-20 token to transfer."
					}
				},
				"transferMultiple(address,address,address[],uint256[])": {
					"params": {
						"from": "which user to pull the tokens.",
						"shares": "The amount of `token` in shares for each receiver in `tos`.",
						"token": "The ERC-20 token to transfer.",
						"tos": "The receivers of the tokens."
					}
				},
				"transferOwnership(address,bool,bool)": {
					"params": {
						"direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
						"newOwner": "Address of the new owner.",
						"renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
					}
				},
				"withdraw(address,address,address,uint256,uint256)": {
					"params": {
						"amount": "of tokens. Either one of `amount` or `share` needs to be supplied.",
						"from": "which user to pull the tokens.",
						"share": "Like above, but `share` takes precedence over `amount`.",
						"to": "which user to push the tokens.",
						"token_": "The ERC-20 token to withdraw."
					}
				}
			},
			"title": "BentoBox",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"batch(bytes[],bool)": {
					"notice": "Allows batched call to self (this contract)."
				},
				"batchFlashLoan(address,address[],address[],uint256[],bytes)": {
					"notice": "Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction."
				},
				"claimOwnership()": {
					"notice": "Needs to be called by `pendingOwner` to claim ownership."
				},
				"deploy(address,bytes,bool)": {
					"notice": "Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."
				},
				"deposit(address,address,address,uint256,uint256)": {
					"notice": "Deposit an amount of `token` represented in either `amount` or `share`."
				},
				"flashLoan(address,address,address,uint256,bytes)": {
					"notice": "Flashloan ability."
				},
				"harvest(address,bool,uint256)": {
					"notice": "The actual process of yield farming. Executes the strategy of `token`. Optionally does housekeeping if `balance` is true. `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true."
				},
				"masterContractApproved(address,address)": {
					"notice": "masterContract to user to approval state"
				},
				"masterContractOf(address)": {
					"notice": "Mapping from clone contracts to their masterContract."
				},
				"nonces(address)": {
					"notice": "user nonces for masterContract approvals"
				},
				"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."
				},
				"registerProtocol()": {
					"notice": "Other contracts need to register with this master contract so that users can approve them for the BentoBox."
				},
				"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)": {
					"notice": "Approves or revokes a `masterContract` access to `user` funds."
				},
				"setStrategy(address,address)": {
					"notice": "Sets the contract address of a new strategy that conforms to `IStrategy` for `token`. Must be called twice with the same arguments. A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over."
				},
				"setStrategyTargetPercentage(address,uint64)": {
					"notice": "Sets the target percentage of the strategy for `token`."
				},
				"transfer(address,address,address,uint256)": {
					"notice": "Transfer shares from a user account to another one."
				},
				"transferMultiple(address,address,address[],uint256[])": {
					"notice": "Transfer shares from a user account to multiple other ones."
				},
				"transferOwnership(address,bool,bool)": {
					"notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
				},
				"whitelistMasterContract(address,bool)": {
					"notice": "Enables or disables a contract for approval without signed message."
				},
				"whitelistedMasterContracts(address)": {
					"notice": "masterContract to whitelisted state for approval without signed message"
				},
				"withdraw(address,address,address,uint256,uint256)": {
					"notice": "Withdraws an amount of `token` from a user account."
				}
			},
			"notice": "The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies. Yield from this will go to the token depositors. Rebasing tokens ARE NOT supported and WILL cause loss of funds. Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"bentobox/BentoBox.sol": "BentoBox"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"bentobox/BentoBox.sol": {
			"keccak256": "0xe3aa76ec82ee563df6f0a79420ae026954adfe1a9aa14816b2984a40541ea3ac",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://1a71ab4d6a3ff86e5c3248b9ddb3dbd68a53167da1b4508541d6f0e92583b8f0",
				"dweb:/ipfs/QmTs1M8JCMC9MVpDGFzZSM3b8uNw8UHxsYMwZtVoxG8EEN"
			]
		},
		"bentobox/MasterContractManager.sol": {
			"keccak256": "0xb3ba4d204f06cda0a5589247138cbf19ad9b877e6242c1333ba95e2ef0d01a13",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b87600a0ff2bebf6f8d786b307193b5ce850c0796977ecbbc89fd83aaf2fcb86",
				"dweb:/ipfs/QmbNjkRq29LqEoCt8ygPMgnHyFUEJehqDSfMSg31psZiJN"
			]
		},
		"bentobox/interfaces/IFlashLoan.sol": {
			"keccak256": "0x881b23cecd78eda9706181c970c95061efca558f3154906f144d785698274536",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb0a394917053636f1168f252aa85b8b0bbcfd6232b1bb3e034f9ce94da64af8",
				"dweb:/ipfs/QmQaPmbU3Jyfhvmc19XPxeFyD1pu4ETmQNCVSWf4ra2UPP"
			]
		},
		"bentobox/interfaces/IStrategy.sol": {
			"keccak256": "0xb24e68d0d9c4077f13d27c397e44f1417c1a0171f6462c2591242c62066d298b",
			"license": "MIT",
			"urls": [
				"bzz-raw://75b092f6e2e1f44bf23f555d2e152e6cdb1d44f7433d02e26f4c55885edfb18d",
				"dweb:/ipfs/QmcEb6qbtbCQVQiT4AEtYPFcxCvvTCP6fREgkCVXupRipY"
			]
		},
		"bentobox/interfaces/IWETH.sol": {
			"keccak256": "0xd36ab8720f5e6055e6cfdf5d767564294aad2a2af02da9fa998d588f94af178f",
			"license": "MIT",
			"urls": [
				"bzz-raw://6314bf2389220fb00b0c8bd380de833ca0b780360c37609e3943d1862e2cc4fa",
				"dweb:/ipfs/QmNZyXfs1cxbYPxYKTKLZ39t4nQAeJgjD1V6Jbc9fJWmUi"
			]
		},
		"bentobox/libraries/RebaseLibrary.sol": {
			"keccak256": "0x289ef0263db7ec32cb1a7727c0f025517c3da6c7e45e59d18565b7732adff98c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a32e4a016ef2d78cfd8cd0dc56c6beb1162bc6fa257097c7a9a196873e124c0f",
				"dweb:/ipfs/QmYvxHq2WnpHCr542JTCtsHfp3HAXx4j2jj7UGcXAPLXLL"
			]
		},
		"boring/BoringBatchable.sol": {
			"keccak256": "0xd649bd88b976e48bb70f48b57a55e83a9c54909ca29d2d024ecf42d2fb430948",
			"license": "MIT",
			"urls": [
				"bzz-raw://b62233bbc329ef953e22695b205ed62e83bccbe896d260a1056c48c7bdba7092",
				"dweb:/ipfs/QmaL2USdWz7hre1QwQuA8SZbC2BRH4u9w8PZqBmx7Utab1"
			]
		},
		"boring/BoringERC20.sol": {
			"keccak256": "0x73c555d64b48a4b07e58abafc0d1147645455497c2cb5629fa9c4e5d3e8b69b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://8143ddf561c08c273594e872504fe9e0596cf3c6e4682ca8c4e6127eed12922c",
				"dweb:/ipfs/Qmbim9RnJfNJZEUV6NwAqNSyCwjah5jGozEWBWRPqfYH4u"
			]
		},
		"boring/BoringFactory.sol": {
			"keccak256": "0x624462eade1e24bdd39db08662153286cc1917031852fa49dd352d8dc36b8b45",
			"license": "MIT",
			"urls": [
				"bzz-raw://6000d2c0ceedb72dedcc627461e6bd173f91942705c7d34519435b9f0f8959be",
				"dweb:/ipfs/Qmc1Pogiagyy8RN5JT7TTmpvbuSNfuzwvueYE7P6xehZzk"
			]
		},
		"boring/BoringMath.sol": {
			"keccak256": "0x31110d27a9693cb0e0c1eb0bdb0074f44082dc1b541487d5d53ae5850a5c5e7b",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e5a58c7f4695f2f6eca20d614bb1a89adc57b5db4d5a9669d2261795dddbcc",
				"dweb:/ipfs/QmRcfAiHUKXketuy98j1nH8eW1LjhHX5xYZnNiK7qD9omm"
			]
		},
		"boring/BoringOwnable.sol": {
			"keccak256": "0x97159eed867bf7608f18f6eb6be16beaf6224105326a4900cad6392fe3a45c8a",
			"license": "MIT",
			"urls": [
				"bzz-raw://77cc49d6238e36f94ebd207007b4cb758e36aa2a34a797a871e47991a5d2605b",
				"dweb:/ipfs/QmVPsYQxXxMyKxWLCYXdXxVohBLtfdXS28FYMZAvc5U5TH"
			]
		},
		"boring/interfaces/IMasterContract.sol": {
			"keccak256": "0x06035f3f05f41e9b70c01d947b43082693d5dbe0caef1d0d4a117d06fb64faf8",
			"license": "MIT",
			"urls": [
				"bzz-raw://c90f4b70702c36a5640ad2fcb2906e861cee2c9a4b625729ff048c178416269c",
				"dweb:/ipfs/QmXHfAuZxeqUEkufnjfX8DSjLJs1ArT7EJZ5uhhA2FnmFs"
			]
		},
		"interfaces/IERC20.sol": {
			"keccak256": "0x8a054387ca80ff85371c047b5945c2c6eab97dbc29d493b1dedd8e16e75e3555",
			"license": "MIT",
			"urls": [
				"bzz-raw://4df7e23ecb3946e0d7130e99330c841e800ca39e068cc0b1663917b91063ba92",
				"dweb:/ipfs/QmQ6VUt3xeiGjxjDb7w2Qg5z9jJkCgdkJAPeFnzdLr4gyQ"
			]
		}
	},
	"version": 1
}