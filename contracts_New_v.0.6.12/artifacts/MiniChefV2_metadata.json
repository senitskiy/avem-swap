{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_sushi",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "EmergencyWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Harvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "lpToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IRewarder",
						"name": "rewarder",
						"type": "address"
					}
				],
				"name": "LogPoolAddition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "contract IRewarder",
						"name": "rewarder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "overwrite",
						"type": "bool"
					}
				],
				"name": "LogSetPool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "sushiPerSecond",
						"type": "uint256"
					}
				],
				"name": "LogSushiPerSecond",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "lastRewardTime",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lpSupply",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accSushiPerShare",
						"type": "uint256"
					}
				],
				"name": "LogUpdatePool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "SUSHI",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC20",
						"name": "_lpToken",
						"type": "address"
					},
					{
						"internalType": "contract IRewarder",
						"name": "_rewarder",
						"type": "address"
					}
				],
				"name": "add",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "addedTokens",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "calls",
						"type": "bytes[]"
					},
					{
						"internalType": "bool",
						"name": "revertOnFail",
						"type": "bool"
					}
				],
				"name": "batch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "emergencyWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "harvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "lpToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "pids",
						"type": "uint256[]"
					}
				],
				"name": "massUpdatePools",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "migrate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "migrator",
				"outputs": [
					{
						"internalType": "contract IMigratorChef",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "pendingSushi",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "pending",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permitToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolInfo",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "accSushiPerShare",
						"type": "uint128"
					},
					{
						"internalType": "uint64",
						"name": "lastRewardTime",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "allocPoint",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "pools",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rewarder",
				"outputs": [
					{
						"internalType": "contract IRewarder",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "contract IRewarder",
						"name": "_rewarder",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "overwrite",
						"type": "bool"
					}
				],
				"name": "set",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IMigratorChef",
						"name": "_migrator",
						"type": "address"
					}
				],
				"name": "setMigrator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sushiPerSecond",
						"type": "uint256"
					}
				],
				"name": "setSushiPerSecond",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sushiPerSecond",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAllocPoint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "direct",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "renounce",
						"type": "bool"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					}
				],
				"name": "updatePool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "accSushiPerShare",
								"type": "uint128"
							},
							{
								"internalType": "uint64",
								"name": "lastRewardTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "allocPoint",
								"type": "uint64"
							}
						],
						"internalType": "struct MiniChefV2.PoolInfo",
						"name": "pool",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rewardDebt",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdrawAndHarvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"add(uint256,address,address)": {
					"params": {
						"_lpToken": "Address of the LP ERC-20 token.",
						"_rewarder": "Address of the rewarder delegate.",
						"allocPoint": "AP of the new pool."
					}
				},
				"batch(bytes[],bool)": {
					"params": {
						"calls": "An array of inputs for each call.",
						"revertOnFail": "If True then reverts after a failed call and stops doing further calls."
					}
				},
				"constructor": {
					"params": {
						"_sushi": "The SUSHI token contract address."
					}
				},
				"deposit(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to deposit.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "The receiver of `amount` deposit benefit."
					}
				},
				"emergencyWithdraw(uint256,address)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens."
					}
				},
				"harvest(uint256,address)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of SUSHI rewards."
					}
				},
				"massUpdatePools(uint256[])": {
					"params": {
						"pids": "Pool IDs of all to be updated. Make sure to update all active pools."
					}
				},
				"migrate(uint256)": {
					"params": {
						"_pid": "The index of the pool. See `poolInfo`."
					}
				},
				"pendingSushi(uint256,address)": {
					"params": {
						"_pid": "The index of the pool. See `poolInfo`.",
						"_user": "Address of user."
					},
					"returns": {
						"pending": "SUSHI reward for a given user."
					}
				},
				"set(uint256,uint256,address,bool)": {
					"params": {
						"_allocPoint": "New AP of the pool.",
						"_pid": "The index of the pool. See `poolInfo`.",
						"_rewarder": "Address of the rewarder delegate.",
						"overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored."
					}
				},
				"setMigrator(address)": {
					"params": {
						"_migrator": "The contract address to set."
					}
				},
				"setSushiPerSecond(uint256)": {
					"params": {
						"_sushiPerSecond": "The amount of Sushi to be distributed per second."
					}
				},
				"transferOwnership(address,bool,bool)": {
					"params": {
						"direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
						"newOwner": "Address of the new owner.",
						"renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
					}
				},
				"updatePool(uint256)": {
					"params": {
						"pid": "The index of the pool. See `poolInfo`."
					},
					"returns": {
						"pool": "Returns the pool that was updated."
					}
				},
				"withdraw(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to withdraw.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens."
					}
				},
				"withdrawAndHarvest(uint256,uint256,address)": {
					"params": {
						"amount": "LP token amount to withdraw.",
						"pid": "The index of the pool. See `poolInfo`.",
						"to": "Receiver of the LP tokens and SUSHI rewards."
					}
				}
			},
			"stateVariables": {
				"addedTokens": {
					"details": "Tokens added"
				},
				"totalAllocPoint": {
					"details": "Total allocation points. Must be the sum of all allocation points in all pools."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"SUSHI()": {
					"notice": "Address of SUSHI contract."
				},
				"add(uint256,address,address)": {
					"notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
				},
				"batch(bytes[],bool)": {
					"notice": "Allows batched call to self (this contract)."
				},
				"claimOwnership()": {
					"notice": "Needs to be called by `pendingOwner` to claim ownership."
				},
				"deposit(uint256,uint256,address)": {
					"notice": "Deposit LP tokens to MCV2 for SUSHI allocation."
				},
				"emergencyWithdraw(uint256,address)": {
					"notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
				},
				"harvest(uint256,address)": {
					"notice": "Harvest proceeds for transaction sender to `to`."
				},
				"lpToken(uint256)": {
					"notice": "Address of the LP token for each MCV2 pool."
				},
				"massUpdatePools(uint256[])": {
					"notice": "Update reward variables for all pools. Be careful of gas spending!"
				},
				"migrate(uint256)": {
					"notice": "Migrate LP token to another LP contract through the `migrator` contract."
				},
				"pendingSushi(uint256,address)": {
					"notice": "View function to see pending SUSHI on frontend."
				},
				"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."
				},
				"poolInfo(uint256)": {
					"notice": "Info of each MCV2 pool."
				},
				"poolLength()": {
					"notice": "Returns the number of MCV2 pools."
				},
				"rewarder(uint256)": {
					"notice": "Address of each `IRewarder` contract in MCV2."
				},
				"set(uint256,uint256,address,bool)": {
					"notice": "Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner."
				},
				"setMigrator(address)": {
					"notice": "Set the `migrator` contract. Can only be called by the owner."
				},
				"setSushiPerSecond(uint256)": {
					"notice": "Sets the sushi per second to be distributed. Can only be called by the owner."
				},
				"transferOwnership(address,bool,bool)": {
					"notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
				},
				"updatePool(uint256)": {
					"notice": "Update reward variables of the given pool."
				},
				"userInfo(uint256,address)": {
					"notice": "Info of each user that stakes LP tokens."
				},
				"withdraw(uint256,uint256,address)": {
					"notice": "Withdraw LP tokens from MCV2."
				},
				"withdrawAndHarvest(uint256,uint256,address)": {
					"notice": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`."
				}
			},
			"notice": "The (older) MasterChef contract gives out a constant number of SUSHI tokens per block. It is the only address with minting rights for SUSHI. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts_New_v.0.6.12/MiniChefV2.sol": "MiniChefV2"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts_New_v.0.6.12/MiniChefV2.sol": {
			"keccak256": "0x3528e00819c628d6804d52ca4f9c638430187281e3a63e44b627b1add431675b",
			"license": "MIT",
			"urls": [
				"bzz-raw://600a55aaa4e6a290b426a9eff2e101ebd17fac20abf447608289e9c9b2fc5d1a",
				"dweb:/ipfs/QmRJuXhNkh49nchFgJ1bVxdZto9RDShTeibrQSq2YQj2eA"
			]
		},
		"contracts_New_v.0.6.12/boring/BoringBatchable.sol": {
			"keccak256": "0xd649bd88b976e48bb70f48b57a55e83a9c54909ca29d2d024ecf42d2fb430948",
			"license": "MIT",
			"urls": [
				"bzz-raw://b62233bbc329ef953e22695b205ed62e83bccbe896d260a1056c48c7bdba7092",
				"dweb:/ipfs/QmaL2USdWz7hre1QwQuA8SZbC2BRH4u9w8PZqBmx7Utab1"
			]
		},
		"contracts_New_v.0.6.12/boring/BoringERC20.sol": {
			"keccak256": "0x73c555d64b48a4b07e58abafc0d1147645455497c2cb5629fa9c4e5d3e8b69b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://8143ddf561c08c273594e872504fe9e0596cf3c6e4682ca8c4e6127eed12922c",
				"dweb:/ipfs/Qmbim9RnJfNJZEUV6NwAqNSyCwjah5jGozEWBWRPqfYH4u"
			]
		},
		"contracts_New_v.0.6.12/boring/BoringMath.sol": {
			"keccak256": "0x31110d27a9693cb0e0c1eb0bdb0074f44082dc1b541487d5d53ae5850a5c5e7b",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e5a58c7f4695f2f6eca20d614bb1a89adc57b5db4d5a9669d2261795dddbcc",
				"dweb:/ipfs/QmRcfAiHUKXketuy98j1nH8eW1LjhHX5xYZnNiK7qD9omm"
			]
		},
		"contracts_New_v.0.6.12/boring/BoringOwnable.sol": {
			"keccak256": "0x97159eed867bf7608f18f6eb6be16beaf6224105326a4900cad6392fe3a45c8a",
			"license": "MIT",
			"urls": [
				"bzz-raw://77cc49d6238e36f94ebd207007b4cb758e36aa2a34a797a871e47991a5d2605b",
				"dweb:/ipfs/QmVPsYQxXxMyKxWLCYXdXxVohBLtfdXS28FYMZAvc5U5TH"
			]
		},
		"contracts_New_v.0.6.12/interfaces/IERC20.sol": {
			"keccak256": "0x8a054387ca80ff85371c047b5945c2c6eab97dbc29d493b1dedd8e16e75e3555",
			"license": "MIT",
			"urls": [
				"bzz-raw://4df7e23ecb3946e0d7130e99330c841e800ca39e068cc0b1663917b91063ba92",
				"dweb:/ipfs/QmQ6VUt3xeiGjxjDb7w2Qg5z9jJkCgdkJAPeFnzdLr4gyQ"
			]
		},
		"contracts_New_v.0.6.12/interfaces/IMasterChef.sol": {
			"keccak256": "0xdc431c2bc74305341ec5e67f1a05b7b1359f15cdd5b1029e3f41aeb24733cefc",
			"license": "MIT",
			"urls": [
				"bzz-raw://31210e0b733879e206edf8bc2ae568171a315b7ac3f107bf1df8ce6c071d87d8",
				"dweb:/ipfs/QmR7ahSfySxyjJU9ofGRS5ZYGVzXqWWudJvNN7SAaKRkao"
			]
		},
		"contracts_New_v.0.6.12/interfaces/IRewarder.sol": {
			"keccak256": "0xb360114ac8010f3421fac71bec2fbb696dee706e391067446bb6a04156417397",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ec78d17cc707252c671e8e2e276a99c51d2fbf5b72ba500d475aefd1c1abead",
				"dweb:/ipfs/QmdT9yKyVwu1aSC2tRu27YiXZ2KmaErEmvQJnBYzECRpBB"
			]
		},
		"contracts_New_v.0.6.12/libraries/SignedSafeMath.sol": {
			"keccak256": "0x4991beb21b224dfcdc3d251e0a60fdc304d4f6b699b2c35d08f3974e5b84c86a",
			"license": "MIT",
			"urls": [
				"bzz-raw://369067b378136df2214fcbabc8fcab8708f6cb3894e4f2e965d83961bf6e4fa1",
				"dweb:/ipfs/QmbvtAiqmY8aLaw8WuZnKzyB6mAuwrZs8QPpcvDN6S5Vig"
			]
		}
	},
	"version": 1
}